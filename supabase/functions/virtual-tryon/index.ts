import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.57.2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { productId, productImage, userImage } = await req.json();

    if (!productId || !productImage || !userImage) {
      throw new Error('Missing required parameters');
    }

    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY is not configured');
    }

    console.log('Using Lovable AI for virtual try-on image generation');

    // Create session record
    const { data: session, error: sessionError } = await supabaseClient
      .from('virtual_trial_sessions')
      .insert({
        product_id: productId,
        user_image_url: userImage,
        status: 'processing'
      })
      .select()
      .single();

    if (sessionError) {
      console.error('Session creation error:', sessionError);
      throw new Error('Failed to create virtual trial session');
    }

    // Use Lovable AI for image editing
    console.log('Calling Lovable AI image editing API...');
    const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash-image-preview',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: 'Create a realistic virtual try-on image showing the person wearing this clothing item. Maintain the person\'s body proportions, pose, and background. Only change the clothing to show them wearing the product naturally and realistically.'
              },
              {
                type: 'image_url',
                image_url: { url: userImage }
              },
              {
                type: 'image_url',
                image_url: { url: productImage }
              }
            ]
          }
        ],
        modalities: ['image', 'text']
      })
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('Lovable AI error:', aiResponse.status, errorText);
      
      await supabaseClient
        .from('virtual_trial_sessions')
        .update({
          status: 'failed',
          error_message: `AI service error: ${aiResponse.status}`,
        })
        .eq('id', session.id);
      
      throw new Error(`Failed to generate image: ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    console.log('âœ“ Successfully generated image using Lovable AI');

    // Extract the generated image from response
    const generatedImageUrl = aiData.choices?.[0]?.message?.images?.[0]?.image_url?.url;
    
    if (!generatedImageUrl) {
      console.error('No image in AI response:', JSON.stringify(aiData));
      throw new Error('No image generated by AI');
    }

    // The image is base64 encoded, extract the base64 data
    const base64Match = generatedImageUrl.match(/^data:image\/\w+;base64,(.+)$/);
    if (!base64Match) {
      throw new Error('Invalid image format from AI');
    }
    
    const resultImageBase64 = base64Match[1];

    // Upload result to Supabase Storage
    const resultFileName = `virtual-trial-results/${session.id}.jpg`;
    const resultImageBuffer = Uint8Array.from(atob(resultImageBase64), c => c.charCodeAt(0));

    const { error: uploadError } = await supabaseClient.storage
      .from('product-images')
      .upload(resultFileName, resultImageBuffer, {
        contentType: 'image/jpeg',
        upsert: true,
      });

    if (uploadError) {
      console.error('Upload error:', uploadError);
      throw new Error('Failed to save result image');
    }

    const { data: { publicUrl } } = supabaseClient.storage
      .from('product-images')
      .getPublicUrl(resultFileName);

    // Update session with result
    await supabaseClient
      .from('virtual_trial_sessions')
      .update({
        result_image_url: publicUrl,
        status: 'completed',
        completed_at: new Date().toISOString(),
      })
      .eq('id', session.id);

    return new Response(
      JSON.stringify({
        sessionId: session.id,
        resultImage: publicUrl,
        success: true,
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error: any) {
    console.error('Virtual try-on error:', error);
    return new Response(
      JSON.stringify({
        error: error.message || 'Failed to process virtual try-on',
        success: false,
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});